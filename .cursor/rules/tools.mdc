# 開発ツール使用ルール

## uv (Package Manager)

### 基本的な使用方法
- **すべての依存関係管理はuvを使用**
- **pipやpoetryは使用しない**
- **仮想環境管理もuvに任せる**

### 依存関係管理
```bash
# 新規プロジェクト作成
uv init

# 依存関係インストール
uv sync

# 本番依存関係追加
uv add package-name

# 開発依存関係追加
uv add --dev package-name

# 依存関係削除
uv remove package-name

# 依存関係更新
uv lock --upgrade

# 特定パッケージのみ更新
uv lock --upgrade-package package-name
```

### アプリケーション実行
```bash
# アプリケーション実行
uv run app
uv run src.main:main

# スクリプト実行
uv run python src/main.py
uv run pytest
uv run ruff check src/
```

### 環境管理
```bash
# Python バージョン指定
uv python install 3.12
uv python pin 3.12

# 仮想環境確認
uv venv --python 3.12
```

## Ruff (Linter & Formatter)

### 設定方針
- **mypy は使用しない - Ruff + Pylance で型チェック**
- **black、isort、flake8 も使用しない - Ruff で統一**
- **line-length = 120** に設定

### pyproject.toml設定
```toml
[tool.ruff]
line-length = 120
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
```

### 実行コマンド
```bash
# フォーマット実行
uv run ruff format src/
uv run ruff format .

# リント実行
uv run ruff check src/
uv run ruff check .

# 自動修正
uv run ruff check --fix src/
uv run ruff check --fix --unsafe-fixes src/

# 設定ファイル指定
uv run ruff check --config pyproject.toml src/
```

### CI/CDでの使用
```bash
# フォーマットチェック（CIで使用）
uv run ruff format --check src/

# リントエラーで終了ステータス設定
uv run ruff check src/ --exit-non-zero-on-fix
```

## Make (Task Runner)

### Makefile設計原則
- **npm-style の使いやすいコマンドを提供**
- **uv を活用した高速実行**
- **開発ワークフローを簡素化**

### 標準コマンド
```bash
make help        # ヘルプ表示（デフォルトターゲット）
make install     # 依存関係インストール
make dev         # 開発依存関係インストール
make format      # コードフォーマット
make lint        # リントチェック
make lint-fix    # リント自動修正
make check       # lint + format チェック
make test        # テスト実行
make run         # アプリケーション実行
make clean       # キャッシュクリア
```

### Makefileパターン
```makefile
.PHONY: help install dev format lint lint-fix check test run clean

help: ## Show this help message
	@echo "Available commands:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-15s\033[0m %s\n", $$1, $$2}'

install: ## Install dependencies
	uv sync

dev: ## Install development dependencies
	uv sync --dev

format: ## Format code with ruff
	uv run ruff format src/ tests/

lint: ## Lint code with ruff
	uv run ruff check src/ tests/

lint-fix: ## Auto-fix lint issues
	uv run ruff check --fix src/ tests/

check: lint format ## Run all checks

test: ## Run tests
	uv run pytest

run: ## Run the application
	uv run app

clean: ## Clean cache files
	find . -type d -name "__pycache__" -delete
	find . -type f -name "*.pyc" -delete
	rm -rf .pytest_cache
	rm -rf .ruff_cache
```

## Docker

### 基本原則
- **Multi-stage builds を使用**
- **uv の公式イメージを活用**
- **非root ユーザーで実行**
- **最小限のイメージサイズを目指す**

### Dockerfile パターン
```dockerfile
# Use the official uv image
FROM ghcr.io/astral-sh/uv:python3.12-bookworm-slim AS builder

# Install system dependencies for Chrome
RUN apt-get update && apt-get install -y \
    wget \
    gnupg \
    unzip \
    && rm -rf /var/lib/apt/lists/*

# Install Chrome
RUN wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add - \
    && echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list \
    && apt-get update \
    && apt-get install -y google-chrome-stable \
    && rm -rf /var/lib/apt/lists/*

# Production stage
FROM builder AS production

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV UV_COMPILE_BYTECODE=1

# Create a non-root user
RUN groupadd --gid 1000 appuser && \
    useradd --uid 1000 --gid 1000 --create-home appuser

# Set working directory
WORKDIR /app

# Copy dependency files
COPY pyproject.toml uv.lock ./

# Install dependencies
RUN uv sync --frozen --no-cache

# Copy source code
COPY --chown=appuser:appuser src/ ./src/

# Switch to non-root user
USER appuser

# Expose port (if needed)
EXPOSE 8000

# Run the application
CMD ["uv", "run", "app"]
```

### Docker コマンド
```bash
# ビルド
docker build -t python-railway-template .

# 実行
docker run -p 8000:8000 python-railway-template

# インタラクティブ実行
docker run -it python-railway-template /bin/bash

# Makefileでの使用
make docker-build
make docker-run
```

## Railway (Deployment)

### 設定ファイル（railway.toml）
```toml
[build]
builder = "DOCKERFILE"
dockerfilePath = "Dockerfile"

[deploy]
restartPolicyType = "ON_FAILURE"
sleepApplication = false
```

### 環境変数設定
```bash
# Railway CLI での環境変数設定
railway variables set ENVIRONMENT=production
railway variables set LOG_LEVEL=INFO

# 本番環境での設定
railway variables set DATABASE_URL=$DATABASE_URL
railway variables set API_KEY=$API_KEY
```

### デプロイコマンド
```bash
# Railway CLI を使用したデプロイ
railway deploy

# 特定ブランチからデプロイ
railway deploy --branch main

# ローカル環境でのテスト
railway run python src/main.py
```

### Railway プロジェクト設定
```bash
# プロジェクト初期化
railway init

# プロジェクトリンク
railway link

# ログ確認
railway logs

# サービス状態確認
railway status
```

## pytest (Testing)

### 基本設定
```toml
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80"
]
```

### テスト実行
```bash
# 全テスト実行
uv run pytest

# 特定ファイルのテスト
uv run pytest tests/test_main.py

# カバレッジ付きテスト
uv run pytest --cov=src --cov-report=html

# 並列実行
uv run pytest -n auto
```

## 開発ワークフロー

### 日常的なコマンド実行順序
```bash
# 1. 依存関係更新
make install

# 2. コード品質チェック
make check

# 3. テスト実行
make test

# 4. アプリケーション実行
make run

# 5. Docker でのテスト
make docker-build && make docker-run
```

### CI/CD での使用
```bash
# CI での実行例
uv sync --frozen
uv run ruff format --check src/
uv run ruff check src/
uv run pytest --cov=src --cov-fail-under=80
```
description:
globs:
alwaysApply: false
---
